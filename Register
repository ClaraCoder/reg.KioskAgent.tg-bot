from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler
import sqlite3
import bcrypt

TOKEN = 'YOUR_BOT_API_TOKEN'
conn = sqlite3.connect('users.db', check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    password TEXT
)''')

def start(update, context):
    update.message.reply_text('Selamat datang! Gunakan /register untuk mendaftar atau /login untuk log masuk.')

def register(update, context):
    update.message.reply_text('Sila masukkan nama pengguna:')
    return 1

def username(update, context):
    context.user_data['username'] = update.message.text
    update.message.reply_text('Sila masukkan kata laluan:')
    return 2

def password(update, context):
    hashed_pw = bcrypt.hashpw(update.message.text.encode('utf-8'), bcrypt.gensalt())
    cursor.execute('INSERT INTO users (username, password) VALUES (?, ?)', 
                   (context.user_data['username'], hashed_pw))
    conn.commit()
    update.message.reply_text('Pendaftaran berjaya!')
    return -1

def login(update, context):
    update.message.reply_text('Masukkan nama pengguna:')
    return 1

def login_username(update, context):
    context.user_data['login_username'] = update.message.text
    update.message.reply_text('Masukkan kata laluan:')
    return 2

def login_password(update, context):
    cursor.execute('SELECT password FROM users WHERE username = ?', 
                   (context.user_data['login_username'],))
    record = cursor.fetchone()
    if record and bcrypt.checkpw(update.message.text.encode('utf-8'), record[0]):
        update.message.reply_text('Log masuk berjaya!')
    else:
        update.message.reply_text('Log masuk gagal!')
    return -1

conv_handler_register = ConversationHandler(
    entry_points=[CommandHandler('register', register)],
    states={1: [MessageHandler(Filters.text & ~Filters.command, username)],
            2: [MessageHandler(Filters.text & ~Filters.command, password)]},
    fallbacks=[]
)

conv_handler_login = ConversationHandler(
    entry_points=[CommandHandler('login', login)],
    states={1: [MessageHandler(Filters.text & ~Filters.command, login_username)],
            2: [MessageHandler(Filters.text & ~Filters.command, login_password)]},
    fallbacks=[]
)

updater = Updater(TOKEN)
dp = updater.dispatcher
dp.add_handler(CommandHandler('start', start))
dp.add_handler(conv_handler_register)
dp.add_handler(conv_handler_login)

updater.start_polling()
updater.idle()
